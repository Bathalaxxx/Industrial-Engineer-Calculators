<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Little's Law Calculator - IE Toolkit</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-gray-100 font-sans">
    <!-- Navigation -->
    <nav class="bg-blue-900 text-white p-4">
        <div class="container mx-auto flex justify-between items-center">
            <h1 class="text-2xl font-bold">IE Toolkit</h1>
            <a href="index.html" class="hover:underline">Home</a>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="container mx-auto py-8 px-4">
        <section class="bg-white p-6 rounded-lg shadow-md">
            <h2 class="text-3xl font-semibold mb-4">Little's Law Calculator</h2>
            <p class="text-gray-600 mb-6">Calculate Work-in-Process (WIP), Flow Time, or Throughput Rate using Little's Law, with visual insights into process dynamics.</p>

            <!-- Little's Law Method Selection -->
            <div class="mb-6">
                <label for="ll-method" class="block text-sm font-medium text-gray-700">Select Little's Law Method</label>
                <select id="ll-method" class="mt-1 p-2 w-full border rounded-md" onchange="toggleInputs()">
                    <option value="standard">Standard Little's Law</option>
                    <option value="variable-throughput">Little's Law with Variable Throughput</option>
                    <option value="batch-processing">Little's Law with Batch Processing</option>
                </select>
            </div>

            <!-- Solve For Selection -->
            <div class="mb-6">
                <label for="solve-for" class="block text-sm font-medium text-gray-700">Solve For</label>
                <select id="solve-for" class="mt-1 p-2 w-full border rounded-md" onchange="toggleInputs()">
                    <option value="wip">Work-in-Process (WIP)</option>
                    <option value="flow-time">Flow Time</option>
                    <option value="throughput">Throughput Rate</option>
                </select>
            </div>

            <!-- Input Form -->
            <div id="input-form" class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Common Inputs (dynamically shown based on solve-for) -->
                <div id="wip-input" class="hidden">
                    <label for="wip" class="block text-sm font-medium text-gray-700">Work-in-Process (units)</label>
                    <input type="number" id="wip" class="mt-1 p-2 w-full border rounded-md" placeholder="e.g., 50">
                </div>
                <div id="flow-time-input" class="hidden">
                    <label for="flow-time" class="block text-sm font-medium text-gray-700">Flow Time (minutes/unit)</label>
                    <input type="number" id="flow-time" class="mt-1 p-2 w-full border rounded-md" placeholder="e.g., 10">
                </div>
                <div id="throughput-input" class="hidden">
                    <label for="throughput" class="block text-sm font-medium text-gray-700">Throughput Rate (units/hour)</label>
                    <input type="number" id="throughput" class="mt-1 p-2 w-full border rounded-md" placeholder="e.g., 100">
                </div>
                <!-- Variable Throughput Inputs -->
                <div id="variable-throughput-inputs" class="hidden">
                    <div>
                        <label for="throughput-std" class="block text-sm font-medium text-gray-700">Standard Deviation of Throughput (units/hour)</label>
                        <input type="number" id="throughput-std" class="mt-1 p-2 w-full border rounded-md" placeholder="e.g., 20">
                    </div>
                    <div>
                        <label for="service-level" class="block text-sm font-medium text-gray-700">Service Level (%)</label>
                        <input type="number" id="service-level" class="mt-1 p-2 w-full border rounded-md" placeholder="e.g., 95">
                    </div>
                </div>
                <!-- Batch Processing Inputs -->
                <div id="batch-processing-inputs" class="hidden">
                    <div>
                        <label for="batch-size" class="block text-sm font-medium text-gray-700">Batch Size (units/batch)</label>
                        <input type="number" id="batch-size" class="mt-1 p-2 w-full border rounded-md" placeholder="e.g., 10">
                    </div>
                </div>
            </div>
            <button onclick="calculateLittlesLaw()" class="mt-6 bg-blue-900 text-white px-4 py-2 rounded-md hover:bg-blue-800">Calculate</button>

            <!-- Results -->
            <div id="results" class="mt-6 hidden">
                <h3 class="text-xl font-semibold mb-2">Results</h3>
                <div id="calculation-results" class="mb-4"></div>
                <div class="mb-4">
                    <h4 class="text-lg font-semibold">Process Dynamics Visualization</h4>
                    <canvas id="littles-law-chart" class="w-full h-64"></canvas>
                </div>
                <div id="interpretation" class="mt-4">
                    <h4 class="text-lg font-semibold">Interpretation</h4>
                    <p id="interpretation-text" class="text-gray-600"></p>
                </div>
                <div id="recommendation" class="mt-4">
                    <h4 class="text-lg font-semibold">Recommendation</h4>
                    <p id="recommendation-text" class="text-gray-600"></p>
                </div>
            </div>
        </section>

        <!-- Little's Law Methods Explanation -->
        <section class="mt-8">
            <h3 class="text-2xl font-semibold mb-4">Little's Law Methods and When to Use Them</h3>
            <div class="space-y-4">
                <div>
                    <h4 class="text-lg font-semibold">Standard Little's Law</h4>
                    <p class="text-gray-600">Use for basic process analysis with stable WIP, flow time, and throughput. Formula: L = λ * W, where L = WIP (units), λ = Throughput Rate (units/hour), W = Flow Time (hours).</p>
                </div>
                <div>
                    <h4 class="text-lg font-semibold">Little's Law with Variable Throughput</h4>
                    <p class="text-gray-600">Use when throughput rate fluctuates, incorporating a buffer for variability. Formula: Adjusts throughput with a safety margin (λ + Z * σ_λ).</p>
                </div>
                <div>
                    <h4 class="text-lg font-semibold">Little's Law with Batch Processing</h4>
                    <p class="text-gray-600">Use when items are processed in batches, adjusting for batch size. Formula: L = λ * W * Batch Size.</p>
                </div>
            </div>
        </section>
    </main>

    <!-- Footer -->
    <footer class="bg-blue-900 text-white text-center p-4">
        <p>&copy; 2025 IE Toolkit. All rights reserved.</p>
    </footer>

    <script>
        let chartInstance = null;

        function toggleInputs() {
            const method = document.getElementById('ll-method').value;
            const solveFor = document.getElementById('solve-for').value;
            document.getElementById('wip-input').classList.add('hidden');
            document.getElementById('flow-time-input').classList.add('hidden');
            document.getElementById('throughput-input').classList.add('hidden');
            document.getElementById('variable-throughput-inputs').classList.add('hidden');
            document.getElementById('batch-processing-inputs').classList.add('hidden');

            // Show inputs based on solve-for selection
            if (solveFor !== 'wip') document.getElementById('wip-input').classList.remove('hidden');
            if (solveFor !== 'flow-time') document.getElementById('flow-time-input').classList.remove('hidden');
            if (solveFor !== 'throughput') document.getElementById('throughput-input').classList.remove('hidden');

            // Show method-specific inputs
            if (method === 'variable-throughput') {
                document.getElementById('variable-throughput-inputs').classList.remove('hidden');
            } else if (method === 'batch-processing') {
                document.getElementById('batch-processing-inputs').classList.remove('hidden');
            }

            document.getElementById('results').classList.add('hidden');
        }

        function calculateLittlesLaw() {
            const method = document.getElementById('ll-method').value;
            const solveFor = document.getElementById('solve-for').value;
            const wip = parseFloat(document.getElementById('wip').value) || 0;
            const flowTime = parseFloat(document.getElementById('flow-time').value) || 0;
            const throughput = parseFloat(document.getElementById('throughput').value) || 0;

            // Validate inputs based on solve-for
            if (solveFor === 'wip' && (isNaN(flowTime) || isNaN(throughput) || flowTime <= 0 || throughput <= 0)) {
                alert('Please enter valid positive numbers for flow time and throughput rate.');
                return;
            } else if (solveFor === 'flow-time' && (isNaN(wip) || isNaN(throughput) || wip <= 0 || throughput <= 0)) {
                alert('Please enter valid positive numbers for WIP and throughput rate.');
                return;
            } else if (solveFor === 'throughput' && (isNaN(wip) || isNaN(flowTime) || wip <= 0 || flowTime <= 0)) {
                alert('Please enter valid positive numbers for WIP and flow time.');
                return;
            }

            let results = '';
            let interpretation = '';
            let recommendation = '';
            let calculatedWip = wip;
            let calculatedFlowTime = flowTime;
            let calculatedThroughput = throughput;

            if (method === 'standard') {
                // Standard Little's Law: L = λ * W
                if (solveFor === 'wip') {
                    calculatedWip = throughput * (flowTime / 60); // Convert flow time to hours
                    results = `<p>Work-in-Process (WIP): ${calculatedWip.toFixed(2)} units</p>`;
                    interpretation = `The Standard Little's Law calculates a WIP of ${calculatedWip.toFixed(2)} units, based on a throughput rate of ${throughput} units/hour and a flow time of ${flowTime} minutes per unit.`;
                    recommendation = `Maintain WIP at ${calculatedWip.toFixed(2)} units to achieve a throughput of ${throughput} units/hour with a ${flowTime}-minute flow time. Optimize processes to reduce flow time if WIP is too high.`;
                } else if (solveFor === 'flow-time') {
                    calculatedFlowTime = (wip / throughput) * 60; // Convert to minutes
                    results = `<p>Flow Time: ${calculatedFlowTime.toFixed(2)} minutes/unit</p>`;
                    interpretation = `The Standard Little's Law calculates a flow time of ${calculatedFlowTime.toFixed(2)} minutes per unit, based on a WIP of ${wip} units and a throughput rate of ${throughput} units/hour.`;
                    recommendation = `Ensure processes allow each unit to complete in ${calculatedFlowTime.toFixed(2)} minutes to maintain ${wip} units in process at a throughput of ${throughput} units/hour. Streamline operations to reduce flow time if needed.`;
                } else {
                    calculatedThroughput = wip / (flowTime / 60); // Convert flow time to hours
                    results = `<p>Throughput Rate: ${calculatedThroughput.toFixed(2)} units/hour</p>`;
                    interpretation = `The Standard Little's Law calculates a throughput rate of ${calculatedThroughput.toFixed(2)} units/hour, based on a WIP of ${wip} units and a flow time of ${flowTime} minutes per unit.`;
                    recommendation = `Achieve a throughput of ${calculatedThroughput.toFixed(2)} units/hour by maintaining ${wip} units in process with a ${flowTime}-minute flow time. Increase throughput by reducing WIP or flow time if possible.`;
                }

            } else if (method === 'variable-throughput') {
                const throughputStd = parseFloat(document.getElementById('throughput-std').value) || 0;
                const serviceLevel = parseFloat(document.getElementById('service-level').value) || 95;
                if (isNaN(throughputStd) || isNaN(serviceLevel) || throughputStd < 0 || serviceLevel <= 0 || serviceLevel >= 100) {
                    alert('Please enter a valid non-negative standard deviation of throughput and service level (0-99.99%).');
                    return;
                }
                // Z-score approximation for service level
                const zScores = { 90: 1.2816, 95: 1.6449, 99: 2.3263 };
                const zScore = zScores[Math.round(serviceLevel)] || 1.6449; // Default to 95%
                const effectiveThroughput = throughput + zScore * throughputStd;

                if (solveFor === 'wip') {
                    calculatedWip = effectiveThroughput * (flowTime / 60); // Convert to hours
                    results = `
                        <p>Work-in-Process (WIP): ${calculatedWip.toFixed(2)} units</p>
                        <p>Effective Throughput: ${effectiveThroughput.toFixed(2)} units/hour (Mean: ${throughput}, Buffer: ${(zScore * throughputStd).toFixed(2)})</p>
                    `;
                    interpretation = `The Little's Law with Variable Throughput calculates a WIP of ${calculatedWip.toFixed(2)} units, using an effective throughput of ${effectiveThroughput.toFixed(2)} units/hour (mean throughput of ${throughput} plus a buffer of ${(zScore * throughputStd).toFixed(2)} for variability at ${serviceLevel}% service level) and a flow time of ${flowTime} minutes.`;
                    recommendation = `Plan for a WIP of ${calculatedWip.toFixed(2)} units to handle throughput variability. Monitor throughput fluctuations and reduce variability to lower WIP if possible.`;
                } else if (solveFor === 'flow-time') {
                    calculatedFlowTime = (wip / effectiveThroughput) * 60; // Convert to minutes
                    results = `
                        <p>Flow Time: ${calculatedFlowTime.toFixed(2)} minutes/unit</p>
                        <p>Effective Throughput: ${effectiveThroughput.toFixed(2)} units/hour (Mean: ${throughput}, Buffer: ${(zScore * throughputStd).toFixed(2)})</p>
                    `;
                    interpretation = `The Little's Law with Variable Throughput calculates a flow time of ${calculatedFlowTime.toFixed(2)} minutes per unit, using a WIP of ${wip} units and an effective throughput of ${effectiveThroughput.toFixed(2)} units/hour (mean throughput of ${throughput} plus a buffer of ${(zScore * throughputStd).toFixed(2)}).`;
                    recommendation = `Ensure processes support a flow time of ${calculatedFlowTime.toFixed(2)} minutes to maintain ${wip} units with variable throughput. Reduce throughput variability to achieve shorter flow times.`;
                } else {
                    calculatedThroughput = wip / (flowTime / 60); // Base throughput
                    results = `
                        <p>Throughput Rate: ${calculatedThroughput.toFixed(2)} units/hour</p>
                        <p>Effective Throughput (with buffer): ${(calculatedThroughput + zScore * throughputStd).toFixed(2)} units/hour</p>
                    `;
                    interpretation = `The Little's Law with Variable Throughput calculates a base throughput rate of ${calculatedThroughput.toFixed(2)} units/hour, based on a WIP of ${wip} units and a flow time of ${flowTime} minutes. With a buffer for variability at ${serviceLevel}% service level, the effective throughput is ${(calculatedThroughput + zScore * throughputStd).toFixed(2)} units/hour.`;
                    recommendation = `Aim for a throughput of ${calculatedThroughput.toFixed(2)} units/hour, planning capacity for up to ${(calculatedThroughput + zScore * throughputStd).toFixed(2)} units/hour to handle variability. Stabilize throughput to reduce required WIP or flow time.`;
                }

            } else if (method === 'batch-processing') {
                const batchSize = parseFloat(document.getElementById('batch-size').value) || 1;
                if (isNaN(batchSize) || batchSize <= 0) {
                    alert('Please enter a valid positive batch size.');
                    return;
                }
                // Little's Law with Batch Processing: L = λ * W * Batch Size
                if (solveFor === 'wip') {
                    calculatedWip = throughput * (flowTime / 60) * batchSize; // Convert to hours
                    results = `
                        <p>Work-in-Process (WIP): ${calculatedWip.toFixed(2)} units</p>
                        <p>Batch Size: ${batchSize} units/batch</p>
                    `;
                    interpretation = `The Little's Law with Batch Processing calculates a WIP of ${calculatedWip.toFixed(2)} units, based on a throughput rate of ${throughput} units/hour, a flow time of ${flowTime} minutes, and a batch size of ${batchSize} units.`;
                    recommendation = `Maintain a WIP of ${calculatedWip.toFixed(2)} units to support batch processing. Consider reducing batch size (${batchSize} units) or flow time to lower WIP if feasible.`;
                } else if (solveFor === 'flow-time') {
                    calculatedFlowTime = (wip / (throughput * batchSize)) * 60; // Convert to minutes
                    results = `
                        <p>Flow Time: ${calculatedFlowTime.toFixed(2)} minutes/unit</p>
                        <p>Batch Size: ${batchSize} units/batch</p>
                    `;
                    interpretation = `The Little's Law with Batch Processing calculates a flow time of ${calculatedFlowTime.toFixed(2)} minutes per unit, based on a WIP of ${wip} units, a throughput rate of ${throughput} units/hour, and a batch size of ${batchSize} units.`;
                    recommendation = `Ensure processes support a flow time of ${calculatedFlowTime.toFixed(2)} minutes per unit for batch processing. Reduce batch size or WIP to shorten flow time if needed.`;
                } else {
                    calculatedThroughput = wip / ((flowTime / 60) * batchSize); // Convert to hours
                    results = `
                        <p>Throughput Rate: ${calculatedThroughput.toFixed(2)} units/hour</p>
                        <p>Batch Size: ${batchSize} units/batch</p>
                    `;
                    interpretation = `The Little's Law with Batch Processing calculates a throughput rate of ${calculatedThroughput.toFixed(2)} units/hour, based on a WIP of ${wip} units, a flow time of ${flowTime} minutes, and a batch size of ${batchSize} units.`;
                    recommendation = `Achieve a throughput of ${calculatedThroughput.toFixed(2)} units/hour with batch processing. Optimize batch size or flow time to increase throughput if required.`;
                }
            }

            // Render Chart
            if (chartInstance) chartInstance.destroy();
            const ctx = document.getElementById('littles-law-chart').getContext('2d');
            chartInstance = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['WIP', 'Flow Time', 'Throughput Rate'],
                    datasets: [{
                        label: 'Process Metrics',
                        data: [
                            calculatedWip,
                            calculatedFlowTime,
                            calculatedThroughput
                        ],
                        backgroundColor: [
                            'rgba(59, 130, 246, 0.5)', // WIP
                            'rgba(75, 192, 192, 0.5)', // Flow Time
                            'rgba(255, 159, 64, 0.5)'  // Throughput
                        ],
                        borderColor: [
                            'rgba(59, 130, 246, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: { display: true, text: 'Value' }
                        },
                        x: {
                            title: { display: true, text: 'Metrics' }
                        }
                    },
                    plugins: {
                        legend: { display: true },
                        title: { display: true, text: 'Little\'s Law Metrics (WIP: units, Flow Time: minutes, Throughput: units/hour)' }
                    }
                }
            });

            document.getElementById('calculation-results').innerHTML = results;
            document.getElementById('interpretation-text').innerText = interpretation;
            document.getElementById('recommendation-text').innerText = recommendation;
            document.getElementById('results').classList.remove('hidden');
        }
    </script>
</body>
</html>
